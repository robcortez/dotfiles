from flask import render_template, flash, redirect, session, url_for, request, g
from flask.ext.login import login_user, logout_user, current_user, login_required
from app import app, db, lm
from .forms import LoginForm, RegForm, NewEventForm
from .models import User, Event, ROLE_ADMIN, ROLE_USER

def flash_errors(form):
    for field, errors in form.errors.items():
        for error in errors:
            flash(u"Error in the %s field - %s" % (
                getattr(form, field).label.text,
                error
            ))

@lm.user_loader
def load_user(id):
    return User.query.get(int(id))

@app.before_request
def before_request():
    g.user = current_user

@app.route('/')
def index():
    return render_template('index.html',
            user=g.user)

@app.route('/dashboard')
@login_required
def dashboard():
    events = Event.query.all() # TODO: filter only upcoming events
    return render_template('dashboard.html',
            events=events,
            user=g.user,
            page_title="Welcome, " + g.user.fname)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if g.user is not None and g.user.is_authenticated():
        return redirect(url_for('dashboard'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user is None:
            flash('Email does not exists. Please register.')
            return redirect(url_for('login'))
        if user.password == form.password.data:
            login_user(user)
            return redirect(request.args.get('next') or url_for('dashboard'))
        flash('Invalid password')
        return redirect(url_for('login'))
    return render_template('login.html',
            page_title='Sign In',
            form=form)

@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('index'))

@app.route('/register', methods=['GET','POST'])
def register():
    if g.user is not None and g.user.is_authenticated():
        flash('You already have an account. If you would like to create an account for someone else, please logout and try again.')
        return redirect(url_for('dashboard'))
    form = RegForm()
    if form.validate_on_submit():
        if User.query.filter_by(email=form.email.data).first() is not None:
            flash('The email address has already been registered')
            return redirect(url_for('register'))
        user = User(fname=form.fname.data,
                lname=form.lname.data,
                email=form.email.data,
                password=form.password1.data)
        db.session.add(user)
        db.session.commit()
        return redirect(url_for('login'))
    return render_template('register.html',
           form=form,
           page_title='Create your account')

@app.route('/event/<event_id>')
def event_view(event_id):
    e = Event.query.filter_by(id=event_id).first()
    if e is None:
        abort(404)
    return render_template('event.html',
                event=e,
                page_title=e.event_name)
    
@app.route('/event/<event_id>/register', methods=['POST', 'GET'])
@login_required
def event_register(event_id):
    e = Event.query.filter_by(id=event_id).first()
    if e is None:
        abort(404)
    if e.is_registered(g.user):
        flash('You are already registered for this event')
        return redirect(url_for('dashboard'))
    event = e.register(g.user)
    db.session.add(event)
    db.session.commit()
    return redirect(url_for('dashboard'))



############################
############################
# Admin Section
############################
############################

@app.route('/admin')
@login_required
def admin():
    if g.user is not None and g.user.is_authenticated() and g.user.access_level == ROLE_ADMIN:
        return render_template('admin.html',
                user=g.user,
                page_title='Admin Portal')
    flash('You are not an admin') # TODO: debug only Please remove me.
    return redirect(url_for('dashboard'))

@app.route('/admin/users')
@login_required
def admin_users():
    if g.user is not None and g.user.is_authenticated() and g.user.access_level == ROLE_ADMIN:
        users = User.query.all()
        return render_template('admin_users.html',
                user=g.user,
                users=users,
                page_title='Admin Portal')
    flash('You are not an admin') # TODO: debug only Please remove me.
    return redirect(url_for('dashboard'))

@app.route('/admin/events', methods=['GET','POST'])
@login_required
def admin_events():
    form = NewEventForm()
    if g.user is not None and g.user.is_authenticated() and g.user.access_level == ROLE_ADMIN:
        if form.validate_on_submit():
            if Event.query.filter_by(datetime=form.datetimepicker.data).first() is None:
                e = Event(event_name=form.event_name.data,datetime=form.datetimepicker.data,price=form.price.data)
                db.session.add(e)
                db.session.commit()
            else:
                flash('An event already exists at that date and time')
            return redirect(url_for('admin_events'))
        else:
            flash_errors(form)
        events = Event.query.all()
        return render_template('admin_events.html',
                user=g.user,
                form=form,
                events=events,
                page_title='Admin Portal')
    flash('You are not an admin') # TODO: debug only Please remove me.
    return redirect(url_for('dashbaord'))

